<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_VGC" Id="{e37ddbb4-4f83-44d0-bab6-047e5a609a6c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_VGC
VAR_IN_OUT

	iq_stValve : ST_VGC;

END_VAR
VAR_INPUT

	i_stUSG	:	ST_VG;
	i_stDSG	:	ST_VG;

	i_xDis_DPIlk : BOOL := FALSE;	// Obsolete
	rDiffPressAllowed	:	REAL := 22.5; // Torr, Default value comes from Vat Valve Manual
END_VAR
VAR_OUTPUT
END_VAR
VAR

	rDiffPress : REAL;
   set : BOOL;
   reset: Bool;
	  

	VGC_State : E_VGC;

	xFirstPass	:	BOOL;
	fbFSInit		:	R_TRIG;
	
	tonDelOK : TON;
	rtOK	:	R_TRIG;
	tonOvrd	:	TON;
	
	tDelOK	:	TIME := T#10S;
	tOvrd	:	TIME := T#10s;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Vacuum gate valve
A. Wallace
16-10-29

A gate valve isolates vacuum volumes. Ideally it can be opened when a system is vented
to allow for faster pumping, and will close when high vacuum is lost.

The following behavior is good for valves in something like a gas attenuator.
This function block does the following:
1. The valve can be opened when the difference between the pressures on both sides is
less than the maximum differential pressure.
2. This rule persists until the pressures on both sides are lower than the vacuum-setpoint.
3. Once at-vac, the valve will close if the pressure on either side rises above the setpoint.

Alternatively, the differential pressure interlock can be disabled so the valve may only be opened
if the pressure on both sides is lower than the at-vacuum-setpoint. You want this behavior if 
the valve is to be used in a UHV section.

Hysteresis is employed to ensure a smooth transition from vented/pumping down, to at-vac.

Finally, an override system is built in so you can bypass all the interlocking logic and 
get back online.
*)


fbFSInit( CLK := TRUE,
			Q => xFirstPass);

(* On first PLC pass, put valve into vented state, which implies a closed valve *)
IF xFirstPass THEN
VGC_State := Vented;
iq_stValve.xOPN_SW := FALSE;
END_IF

///Check valve postion
IF iq_stValve.i_xClsLS AND  iq_stValve.i_xOpnLS THEN
	iq_stValve.eState:=INVALID;
ELSIF NOT iq_stValve.i_xClsLS AND iq_stValve.i_xOpnLS THEN 
	iq_stValve.eState:=OPEN;
ELSIF iq_stValve.i_xClsLS AND NOT iq_stValve.i_xOpnLS THEN 
	iq_stValve.eState:=CLOSED;
ELSIF NOT iq_stValve.i_xClsLS AND NOT iq_stValve.i_xOpnLS THEN 
	iq_stValve.eState:=MOVING;
ELSE
	iq_stValve.eState:=INVALID;
END_IF

// Update hysteresis
///////////////////////////////////////////////////
IF iq_stValve.rAT_VAC_SP_LAST <> iq_stValve.rAT_VAC_SP OR xFirstPass THEN
	iq_stValve.rAT_VAC_SP_LAST := iq_stValve.rAT_VAC_SP;
	iq_stValve.rAT_VAC_HYS := iq_stValve.rHYST_PERC * iq_stValve.rAT_VAC_SP;
END_IF

iq_stValve.rAT_VAC_HYS := LIMIT(0, iq_stValve.rAT_VAC_HYS, iq_stValve.rAT_VAC_SP);
IF iq_stValve.rAT_VAC_SP <> 0 THEN
	IF iq_stValve.rHYST_PERC <> (iq_stValve.rAT_VAC_HYS / iq_stValve.rAT_VAC_SP) THEN
		iq_stValve.rHYST_PERC := LIMIT(0, (iq_stValve.rAT_VAC_HYS / iq_stValve.rAT_VAC_SP) ,1);
	END_IF
END_IF
// Valve at vacuum check
///////////////////////////////////////////////////
	set := i_stUSG.rPRESS < iq_stValve.rAT_VAC_HYS AND i_stDSG.rPRESS < iq_stValve.rAT_VAC_HYS AND i_stUSG.xPRESS_OK AND i_stDSG.xPRESS_OK;
 	iq_stValve.xAT_VAC S= set;
	reset := i_stUSG.rPRESS > iq_stValve.rAT_VAC_SP OR i_stDSG.rPRESS > iq_stValve.rAT_VAC_SP OR NOT i_stUSG.xPRESS_OK OR NOT i_stDSG.xPRESS_OK;
	iq_stValve.xAT_VAC R= reset;
	
// Differential pressure check
///////////////////////////////////////////////////
	(* Calc the differential pressure across the valve *)
	rDiffPress := ABS(i_stUSG.rPRESS - i_stDSG.rPRESS);
	
	(* As long as the differential pressure is less than 30mbar, the valve is allowed to open *)
	IF rDiffPress <= rDiffPressAllowed AND i_stUSG.xPRESS_OK AND i_stDSG.xPRESS_OK THEN
		iq_stValve.xDP_OK := TRUE;
	ELSE
		iq_stValve.xDP_OK	:= FALSE;
		(* If the differential pressure is exceeded, even when the valve is open,
		the state is unexpected and triggers a fault, because it suggests that something
		is wrong with the valve, or gauges or mapping or there is a major leak on one side.*)
		VGC_State := ERR_DiffPress;
	END_IF

// Valve state
///////////////////////////////////////////////////
CASE VGC_State OF
	Vented: (* The Vented state is used during pump down *)
		(* Assuming the pump down went well, we are now at vacuum on both sides,
		so we move to the vacuum state, otherwise remain in the vented state *)
		IF iq_stValve.xAT_VAC THEN
		VGC_State := AtVacuum;
		ELSE
		VGC_State := Vented;
		END_IF
	
	AtVacuum:
		IF iq_stValve.xAT_VAC THEN
		(* If both pressure setpoints are made,
		then enable the differential pressure interlock, regardless of the valve state
		assuming we're using some kind of ion gauge where a pressure setpoint cannot be higher than 1E-4 T *)
		VGC_State := AtVacuum;
		ELSE
		
			(* If the valve is open (or in an unknown state) and either gauge is not at it's vacuum setpoint,
			we have a loss of vacuum error *)
			IF (iq_stValve.i_xOpnLS OR (NOT iq_stValve.i_xOpnLS AND NOT iq_stValve.i_xClsLS)) THEN
			VGC_State := ERR_LostVac;
		
			(* Alternatively, if the valve is already closed and we lose pressure on one side,
			it was probably intentional venting, so we calmly move back to venting mode, and
			disable the differential pressure interlock *)
			ELSIF iq_stValve.i_xClsLS THEN
			VGC_State := Vented;
			END_IF
		
		END_IF
	
	ERR_DiffPress:
		VGC_State := Vented;
		iq_stValve.xERR_DifPres := TRUE;
	
	ERR_LostVac:
		VGC_State := Vented;
		iq_stValve.xERR_LstVac := TRUE;
	
	END_CASE




// Interlock evaluation
///////////////////////////////////////////////
iq_stValve.xOPN_OK := iq_stValve.xEXT_OK AND iq_stValve.xAT_VAC;


(* Valve operation *)

(* Reset the EPICS command to open the valve if the interlock is lost *)
IF NOT iq_stValve.xOPN_OK THEN
iq_stValve.xOPN_SW := FALSE;
END_IF

(* Override logic *)
(* Goal: give ability to override, but do so in a way that people won't forget it.
Solution: Override only after ten seconds of override, protect against blips,
when the valve permission goes true for more than ten seconds consistently, remove override
*)

tonDelOK(IN:=iq_stValve.xOPN_OK, PT:=tDelOK);
rtOK(CLK:=tonDelOK.Q);
IF rtOK.Q AND iq_stValve.xOvrdOpn THEN 
iq_stValve.xOvrdOpn :=FALSE;
iq_stValve.xOPN_SW := TRUE; //for seamless transition
END_IF

//Override timer
tonOvrd(IN:=iq_stValve.xOvrdOpn, PT:=tOvrd);

(* Here's where the valve opens *)
iq_stValve.xOPN_DO := (iq_stValve.xOPN_SW AND iq_stValve.xOPN_OK) OR (tonOvrd.Q AND g_stSystem.xOverrideMode);

// Alarm reset
//////////////////////////////////////
ACT_ResetAlarms();


]]></ST>
    </Implementation>
    <Action Name="ACT_ResetAlarms" Id="{8962b369-e8aa-42c4-9c4c-4249c380363a}">
      <Implementation>
        <ST><![CDATA[iq_stValve.xERR_DifPres R= iq_stValve.xAlmRst;
iq_stValve.xERR_LstVac R= iq_stValve.xAlmRst;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_VGC">
      <LineId Id="3" Count="34" />
      <LineId Id="199" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="38" Count="23" />
      <LineId Id="248" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="66" Count="98" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_VGC.ACT_ResetAlarms">
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>