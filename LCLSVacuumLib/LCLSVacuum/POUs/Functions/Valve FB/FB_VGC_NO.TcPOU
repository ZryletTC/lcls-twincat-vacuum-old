<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.6">
  <POU Name="FB_VGC_NO" Id="{834212c8-dcca-4e79-bd90-03fb1a3458f2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_VGC_NO
VAR_IN_OUT

	iq_stValve : ST_VGC_NO;

END_VAR
VAR_INPUT

	i_stUSG	:	ST_VG;
	i_stDSG	:	ST_VG;

	i_xDis_DPIlk : BOOL := FALSE; (*Set to true when calling the function to disable the differential pressure interlock *)
	i_rDiffPressAllowed	:	REAL := 22.5;
END_VAR
VAR_OUTPUT
END_VAR
VAR

	rDiffPress : REAL;

	

	VGC_State : E_VGC;

	xFirstPass	:	BOOL;
	fbFSInit		:	R_TRIG;
	
	tonDelOK : TON;
	rtOK	:	R_TRIG;
	tonOvrd	:	TON;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Normally Open Gate Valve
This kind of gate valve can usually be found in systems with some kind of delicate window valve, not intended to hold
a full atmosphere.
*)

fbFSInit( CLK := TRUE,
			Q => xFirstPass);

(* On first PLC pass, put valve into vented state, which implies an open valve *)
IF xFirstPass THEN
VGC_State := Vented;
iq_stValve.xCLS_SW := FALSE;
END_IF


(* Calc the differential pressure across the valve *)
rDiffPress := ABS(i_stUSG.rPRESS - i_stDSG.rPRESS);


(* Here's where the Dis_DPIlk can enable or disable the DP interlock code above,
By default the Dis_DPIlk is FALSE, so the valve is interlocked by the external interlocks
and the differential pressure across the valve. *)

IF i_xDis_DPIlk THEN
iq_stValve.xCLS_OK := iq_stValve.xEXT_OK;
ELSE

CASE VGC_State OF

Vented: (* The Vented state is used during pump down *)

(* As long as the differential pressure is less than 30mbar, the valve is allowed to close/ remain closed *)
IF rDiffPress <= i_rDiffPressAllowed AND i_stUSG.xPRESS_OK AND i_stDSG.xPRESS_OK THEN
iq_stValve.xDP_OK := TRUE;
ELSE
iq_stValve.xDP_OK	:= FALSE;
(* If the differential pressure is exceeded, even when the valve is open,
the state is unexpected and triggers a fault, because it suggests that something
is wrong with the valve, or gauges or mapping or there is a major leak on one side.*)
VGC_State := ERR_DiffPress;
END_IF

(* Assuming the pump down went well, we are now at vacuum on both sides,
so we move to the vacuum state, otherwise remain in the vented state *)
IF i_stUSG.xAT_VAC AND i_stDSG.xAT_VAC AND i_stUSG.xPRESS_OK AND i_stDSG.xPRESS_OK THEN
VGC_State := AtVacuum;
ELSE
VGC_State := Vented;
END_IF

AtVacuum:
(* Note for normally open valves, the condition for remaining closed is that the differential pressure
does not exceed some certain value, which comes from the pressure that the window can hold.
*)
IF rDiffPress <= i_rDiffPressAllowed AND i_stUSG.xPRESS_OK AND i_stDSG.xPRESS_OK THEN
(* If both pressure setpoints are made,
then enable the differential pressure interlock, regardless of the valve state
assuming we're using some kind of ion gauge where a pressure setpoint cannot be higher than 1E-4 T *)
iq_stValve.xDP_OK := TRUE;
VGC_State := AtVacuum;
ELSE

	(* If the valve is closed (or in an unknown state) and either gauge is not at it's vacuum setpoint,
	we have a loss of vacuum error *)
	IF (iq_stValve.i_xClsLS OR (NOT iq_stValve.i_xOpnLS AND NOT iq_stValve.i_xClsLS)) AND 
	(NOT i_stUSG.xAT_VAC OR NOT i_stDSG.xAT_VAC) THEN
		VGC_State := ERR_LostVac;
		iq_stValve.xDP_OK := FALSE;

	(* Alternatively, if the valve is already open and we lose vacuum or differential pressure,
	it was probably intentional venting, so we calmly move back to venting mode, and
	disable the differential pressure interlock *)
	ELSIF iq_stValve.i_xOpnLS AND(NOT i_stUSG.xAT_VAC OR NOT i_stDSG.xAT_VAC) THEN
		iq_stValve.xDP_OK := FALSE;
		VGC_State := Vented;
	END_IF

END_IF

ERR_DiffPress:
iq_stValve.xDP_OK := FALSE;
VGC_State := Vented;
iq_stValve.xERR_DifPres := TRUE;

ERR_LostVac:
iq_stValve.xDP_OK := FALSE;
VGC_State := Vented;
iq_stValve.xERR_LstVac := TRUE;

END_CASE

(* In the default state the Valve.CLS_OK depends on both the external and differential pressure interlocks *)
iq_stValve.xCLS_OK := iq_stValve.xEXT_OK AND iq_stValve.xDP_OK;
END_IF

(* Valve operation *)

(* Reset the PLC/EPICS command to open the valve if the interlock is lost *)
IF NOT iq_stValve.xCLS_OK THEN
iq_stValve.xCLS_SW := FALSE;
END_IF

(* Override logic *)
(* Goal: give ability to override, but do so in a way that people won't forget it.
Solution: Override only after ten seconds of override, protect against blips,
when the valve permission goes true for more than ten seconds consistently, remove override
*)

tonDelOK(IN:=iq_stValve.xCLS_OK, PT:=T#10S);
rtOK(CLK:=tonDelOK.Q);
IF rtOK.Q AND iq_stValve.xOvrdCls THEN 
iq_stValve.xOvrdCls :=FALSE;
iq_stValve.xCLS_SW := TRUE;
END_IF

//Override timer
tonOvrd(IN:=iq_stValve.xOvrdCls, PT:=T#10S);

(* Here's where the valve is closed *)
iq_stValve.xCLS_DO := (iq_stValve.xCLS_SW AND iq_stValve.xCLS_OK) OR (tonOvrd.Q AND g_stSystem.xOverrideMode);
]]></ST>
    </Implementation>
    <Action Name="ACT_ResetAlarms" Id="{8a371ee9-59fe-4bcb-98ab-980d04689b6c}">
      <Implementation>
        <ST><![CDATA[iq_stValve.xERR_DifPres R= iq_stValve.xAlmRst;
iq_stValve.xERR_LstVac R= iq_stValve.xAlmRst;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>