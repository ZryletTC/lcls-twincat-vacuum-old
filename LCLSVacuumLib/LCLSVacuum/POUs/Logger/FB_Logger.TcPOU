<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.5">
  <POU Name="FB_Logger" Id="{227c1bce-209d-4aad-8160-124282bb6370}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Logger
VAR_INPUT
	i_CloseSocket	:	BOOL := FALSE;
	i_bReset		:	BOOL := FALSE;
END_VAR
VAR
	fbUDPSocketManager	:	FB_ConnectionlessSocket;
	udpSocket			:	T_HSOCKET;
	fbUDPSocketSend		:	FB_SocketUdpSendTo;
	sOutgoingMesg		:	T_MaxString;
	eState				:	E_MessengerState;
	stDiag				:	ST_fbDiagnostics;
	rtReset				:	R_TRIG;
	fbGetSystemTime		:	FB_LocalSystemTime := (bEnable := TRUE);
	fbGetHostName		:	FB_GetHostName := (bExecute := TRUE, sNetID := '');
	ctuSentSomething	:	CTU := (PV := 100);
END_VAR
VAR CONSTANT

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Syslog Logger
A. Wallace 2016-9-3

This is used to pass PLC notification messeges to a syslog server.

This POU constantly attempts to send out messages from the global buffer.
*)

gfbBuffer.pBuffer := ADR(gMesgBuffer); 
gfbBuffer.cbBuffer:= SIZEOF(gMesgBuffer);

fbGetSystemTime(); 
IF fbGetSystemTime.bValid THEN
	gsCurrentTime := SYSTEM_TIME_TO_RFC3339(fbGetSystemTime.systemTime);
ELSE
	gsCurrentTime := cNILVALUE;
END_IF

fbGetHostName();
IF NOT (fbGetHostName.bBusy OR fbGetHostName.bError) THEN
	gsHostName := fbGetHostName.sHostName;
ELSE
	gsHostName := cNILVALUE;
END_IF

IF i_CloseSocket THEN 
	eState := CloseSocket; 
END_IF

rtReset(CLK:=i_bReset);
IF rtReset.Q THEN
	eState := CreateSocket;
END_IF

CASE eState OF
	Init:
		;
	CreateSocket:
		fbUDPSocketManager.nLocalPort := g_udpSyslog;
		fbUDPSocketManager.bEnable := TRUE;
		
		IF fbUDPSocketManager.eState = eSOCKET_CREATED THEN
			eState := Active;
		ELSIF fbUDPSocketManager.bError THEN
			eState := Err;
			fbUDPSocketManager.bEnable := FALSE;
			stDiag.resultIdx.Inc();
			stDiag.fString( sOut=>stDiag.asResults[stDiag.resultIdx.Val], sFormat:='Socketmanger error: %d', arg1:=F_UDINT(fbUDPSocketManager.nErrID));
		END_IF
	Active:
		IF fbUDPSocketManager.eState = eSOCKET_TRANSIENT  OR 
			fbUDPSocketManager.bError THEN
			 eState := Err; 
		END_IF
		
		// While the socket is active, go ahead and send whatever is in the buffer
		IF gfbBuffer.nCount > 0 AND NOT fbUDPSocketSend.bBusy THEN
			gfbBuffer.A_RemoveHead(getValue=>sOutgoingMesg);
			fbUDPSocketSend.bExecute := TRUE; //reset in the action after busy goes true
			IF sOutgoingMesg <> '' THEN
				ctuSentSomething(CU:=TRUE);
			END_IF
		ELSIF fbUDPSocketSend.bError THEN
			eState := Err;
			stDiag.resultIdx.Inc();
			stDiag.fString( sOut=>stDiag.asResults[stDiag.resultIdx.Val], sFormat:='Socketm send error: %d', arg1:=F_UDINT(fbUDPSocketSend.nErrId));
		ELSIF gfbBuffer.nCount = 0 OR fbUDPSocketSend.bBusy THEN
			stDiag.resultIdx.Inc();
			stDiag.fString( sOut=>stDiag.asResults[stDiag.resultIdx.Val], sFormat:='Waiting to send');
			ctuSentSomething(CU:=FALSE);
		ELSE
			eState := Err;
			stDiag.resultIdx.Inc();
			stDiag.fString( sOut=>stDiag.asResults[stDiag.resultIdx.Val], sFormat:='Something else happened in active -> error');
		END_IF
		
	CloseSocket:
		fbUDPSocketManager.bEnable R= i_CloseSocket;
		IF fbUDPSocketManager.eState = eSOCKET_CLOSED THEN
			eState := Init;
		ELSIF fbUDPSocketManager.bBusy AND NOT fbUDPSocketManager.bEnable THEN
			;
		ELSIF fbUDPSocketManager.bError THEN
			eState := Err;
		ELSE
			eState := Err;
		END_IF
	Err:
		eState := Init;
		stDiag.resultIdx.Inc();
		stDiag.asResults[stDiag.resultIdx.Val] := 'Moving back to Init state from Error';
END_CASE



Manager();
SocketSendTo();]]></ST>
    </Implementation>
    <Action Name="Manager" Id="{0b30d4fb-bcf3-449a-83ce-64e06542700f}">
      <Implementation>
        <ST><![CDATA[fbUDPSocketManager(hSocket => udpSocket);]]></ST>
      </Implementation>
    </Action>
    <Action Name="SocketSendTo" Id="{fca34bf9-1619-4cff-a5ea-95f906bcb6c8}">
      <Implementation>
        <ST><![CDATA[fbUDPSocketSend.hSocket := udpSocket;
fbUDPSocketSend.sRemoteHost := g_IOCHostIP;
fbUDPSocketSend.nRemotePort := g_udpSyslog;
fbUDPSocketSend.pSrc := ADR(sOutgoingMesg);
fbUDPSocketSend.cbLen := SIZEOF(sOutgoingMesg);
fbUDPSocketSend();
fbUDPSocketSend.bExecute R= fbUDPSocketSend.bBusy;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>